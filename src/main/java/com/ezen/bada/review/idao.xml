<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.ezen.bada.review.Service">

<select id="input_info" resultType="com.ezen.bada.member.MemberDTO">
	select id, name from bada_user where id=#{param1}
</select>

<select id="getBeachList" resultType="com.ezen.bada.review.BeachDTO">
    SELECT beach_code, beach FROM bada_list
</select>

<insert id="review_save">
   INSERT INTO bada_user_review (
       id, name, review_num, visit_day, 
       review_title, review_contents, photo1, photo2, photo3, photo4, photo5, 
       thumbnail, hits, recommend, report, review_score, hashtag, reply, beach_code, re_visit
   ) VALUES (
       #{id}, #{name}, review_seq.nextval, #{visit_day}, 
       #{review_title}, #{review_contents},
       #{fileNames[0]}, #{fileNames[1]}, #{fileNames[2]}, #{fileNames[3]}, #{fileNames[4]},
       #{thumbnail}, 0, 0, 0, #{review_score}, #{hashtags}, 0, #{beach_code}, #{re_visit}
   )
</insert>

<!-- 페이징처리 전체레코드수 -->
<select id="total" resultType="int">
   select count(*)from bada_user_review
</select>

<!-- 한 페이지 내 리스트 목록 -->
<select id="review_list" resultType="com.ezen.bada.review.AllBoardDTO">
   select * from (
   select rownum rn, A.* from(  
   select id, name, review_num, TO_CHAR(write_day, 'YYYY-MM-DD')write_day, visit_day, review_title,
   hits,recommend, reply from bada_user_review order by review_num desc)A)
   where rn between #{start} AND #{end}
</select>


<!-- 조회수 up -->
<update id="hit_up">
	UPDATE bada_user_review SET hits = hits + 1 where review_num = #{param1}
</update>

<!-- 리뷰 디테일 페이지 -->
<select id="review_detail" resultType="com.ezen.bada.review.AllBoardDTO">
	select * from bada_user_review where review_num = #{param1}
</select>

<!-- 해변코드 -> 해변명 변환 -->
 
 <select id="beach_name" resultType="String">
 	select bl.beach
	from bada_user_review br join bada_list bl
	on br.beach_code=bl.beach_code and br.review_num= #{param1}
 </select>
 
 <!-- 게시글 삭제 -->
<delete id="review_delete">
	delete from bada_user_review where review_num = #{param1}
</delete>

<!-- 게시글 삭제시 함께 삭제할 이미지파일 -->
<select id="all_photo" resultType="com.ezen.bada.review.AllBoardDTO">
    SELECT photo1, photo2, photo3, photo4, photo5, thumbnail 
    FROM bada_user_review 
    WHERE review_num = #{review_num}
</select>

 <!-- 게시글 수정화면 -->
<select id="change_view" resultType="com.ezen.bada.review.AllBoardDTO">
	select * from bada_user_review where review_num = #{param1}
</select>

<!-- 기존 썸네일 가져오기 -->
<select id="original_thumbnail" resultType="String">
	select thumbnail from bada_user_review where review_num = #{param1}
</select>

<!-- 사진 수정 변경 -->
<update id="update_photo" parameterType="map">
    UPDATE bada_user_review
    SET photo1 = #{change_photo[0]}, 
        photo2 = #{change_photo[1]}, 
        photo3 = #{change_photo[2]}, 
        photo4 = #{change_photo[3]}, 
        photo5 = #{change_photo[4]}
    WHERE review_num = #{review_num}
</update>

<!-- 첨부파일 제외 나머지 수정사항 변경 -->
<update id="review_modify">
   UPDATE bada_user_review
    SET visit_day = #{visit_day},
        review_title = #{review_title}, 
        review_contents = #{review_contents},
        review_score = #{review_score}, 
        hashtag = #{hashtags}, 
        beach_code = #{beach_code}, 
        re_visit = #{re_visit}
    WHERE review_num = #{review_num}
</update>

<update id="thumbnail_upload">
	UPDATE bada_user_review set thumbnail=#{param2} where review_num = #{param1}
</update>

<!-- 댓글저장 -->

<insert id="reply_save">
	INSERT INTO bada_review_comment (review_num, reply_num, id, reply_contents) 
	VALUES (#{review_num},review_reply_seq.nextval, #{loginid}, #{reply})
</insert>

<!-- 댓글수 up -->
<update id="reply_update">
	UPDATE bada_user_review SET reply = reply + 1 where review_num = #{param1}
</update>


<!-- 댓글불러오기 -->
<select id="reply_show" resultType="com.ezen.bada.review.ReplyDTO">
	select * from bada_review_comment where review_num = #{param1}
</select>

<!-- 중복 추천 확인 -->
<select resultType="int" id="review_rec_id">
	select count (rec_id) from bada_user_review
	where review_num=#{param1} and rec_id like '%' || #{param2} || '%'
</select>

<!-- 게시글 추천 ID 저장 -->
<update id="review_recommand">
	update bada_user_review set recommend = recommend + 1, rec_id = rec_id || ' ' || #{param1}
	where review_num = #{param2}
</update>

<!-- 게시글 중복신고 체크 -->
<select id="review_ban_check" resultType="String">
	select title 
	from bada_review_report 
	where id=#{param1} and ban_review_num=#{param2} and category=#{param3} and content=#{param4}
</select>

<!-- 게시글 신고 저장 -->
<insert id="review_ban_save">
	insert into bada_review_report (review_report_num, title, name, id, ban_review_num, ban_name, ban_id, category, content, ban_user_number, user_number) 
	values 
	(review_report_seq.nextval, #{param1}, #{param2}, #{param3}, #{param4}, #{param5}, #{param6}, #{param7}, #{param8},#{param9},#{param10})
</insert>

<!-- bada_user_review 신고 count up -->
<update id="report_up">
	UPDATE bada_user_review SET report = report + 1 where review_num = #{param1}
</update>

<!-- 댓글 삭제 -->
<delete id="reply_delete">
	delete from bada_review_comment where reply_num = #{param1}
</delete>

<!-- 댓글수 down -->
<update id="reply_minus">
	UPDATE bada_user_review SET reply = reply - 1 where review_num = #{param1}
</update>

<!-- 댓글수정 -->
<update id="reply_modify">
	UPDATE bada_review_comment SET reply_contents = #{param2} where reply_num = #{param1}
</update>

<!-- 댓글 실시간 반영 정보 추출 -->

<select id="reply_info" resultType="com.ezen.bada.review.ReplyDTO">
	select id, reply_day from bada_review_comment 
	where reply_num =#{param1}
</select>

<!-- 댓글 신고 저장 -->

<insert id="reply_report_save">
   INSERT INTO bada_review_reply_report 
   (review_reply_ban_num, review_num, reply_num, id, ban_id, reply_contents, reason, detail, BAN_USER_NUMBER, name, ban_name, user_number)
   VALUES 
   (review_reply_ban_seq.nextval, #{review_num}, #{reply_num}, #{id}, #{ban_id}, #{reply_contents}, #{reason}, #{detail}, #{user_num}, #{name}, #{ban_name}, #{user_num2})
</insert>


<!-- 댓글 중복신고 체크 -->
<select id="report_check" resultType="String">
	select detail 
	from bada_review_reply_report
	where reply_num=#{param1} and id=#{param2} and reason=#{param3} and reply_contents=#{param4}
</select>

<!-- 리뷰게시글 검색 -->

<select id="search_result" resultType="com.ezen.bada.review.AllBoardDTO">
 	select * from bada_user_review
 	    <where>
        <choose>
            <!-- 제목 검색 -->
            <when test="param1 == 'title'">
                review_title LIKE '%' || #{param2}  || '%'
            </when>
            <!-- 내용 검색 -->
            <when test="param1 == 'intext'">
                review_contents LIKE '%' || #{param2}  || '%'
            </when>
            <!-- 작성자명 검색 -->
            <when test="param1 == 'name'">
                name LIKE '%' || #{param2}  || '%'
            </when>
           
 			<!-- 방문시기 검색 -->
            <when test="param1 == 'vdate' and param2 != '2020'">
                visit_day LIKE #{param2} || '%'
            </when>
            <when test="param1 == 'vdate' and param2 == '2020'">
       			<![CDATA[EXTRACT(YEAR FROM TO_DATE(visit_day, 'YYYY-MM-DD')) <= #{param2}]]>
    		</when>
            
            <!-- 작성일 검색 -->
            <when test="param1 == 'wdate' and param2 != '2020'">
  			  TO_CHAR(write_day, 'YYYY-MM-DD') LIKE #{param2} || '%'
			</when>
			<when test="param1 == 'wdate' and param2 == '2020'">
			   <![CDATA[EXTRACT(YEAR FROM write_day) <= #{param2}]]>
			</when>
       
        </choose>
    </where>
</select>


<!-- 회원일련번호 -->
<select id="user_num" resultType="Integer">
	select user_number from bada_user where ID = #{param1}
</select>

<!-- 회원이름 -->
<select id="user_name" resultType="String">
	select name from bada_user where ID = #{param1}
</select>


<!-- 리뷰게시판 지역선택별 게시글 -->
<select id="search_area_result" resultType="com.ezen.bada.review.AllBoardDTO">
	SELECT bur.* 
	FROM bada_user_review bur
	JOIN bada_list bl ON bur.beach_code = bl.beach_code
	WHERE #{param1} = '전체' OR  (#{param1} = '경인' AND bl.state IN ('경기', '인천')) OR (bl.state = #{param1})
	ORDER BY bur.review_num DESC
</select>

<!-- 신고된 게시글 목록 -->
<select id="review_report" resultType="com.ezen.bada.review.Review_report_DTO">
   select * from (
   select rownum rn, A.* from(  
   select * from bada_review_report order by review_report_num desc)A)
   where rn between #{start} AND #{end}
</select>

<!-- 페이징처리 전체레코드수 -->
<select id="ban_review_total" resultType="int">
   select count(*)from bada_review_report
</select>

<!-- 신고내역 상세 내역 (관리자 확인페이지) -->
<select id="review_ban_detail" resultType="com.ezen.bada.review.Review_report_DTO">
	select * from bada_review_report where ban_review_num = #{param1}
</select>

<!-- 유저별 신고 누적회수 -->
<select id="review_ban_count" resultType="int">
	select count(*)from bada_review_report where ban_id=#{param1}
</select>

<!-- 게시글 신고 내역 중 동일 아이디 신고사례 -->
<select id="review_ban_list" resultType="com.ezen.bada.review.Review_report_DTO">
	select * from bada_review_report where ban_id=#{param1} order by ban_date DESC
</select> 
  
<!-- 베스트리뷰를 4순위까지 추출합니다 -->
<select id="pickbestrec" resultType="com.ezen.bada.review.AllBoardDTO">
SELECT * FROM (SELECT t.*, ROWNUM AS rnum
FROM (SELECT * FROM bada_user_review ORDER BY recommend desc, hits desc, write_day desc) t)
WHERE rnum BETWEEN 1 AND 4
</select>

 <!-- 게시글 신고 내역 삭제 -->
<delete id="review_ban_delete">
	delete from bada_review_report where review_report_num = #{param1}
</delete>

<!-- 페이징처리 신고댓글 레코드수 -->
<select id="ban_reply_total" resultType="int">
   select count(*)from bada_review_reply_report
</select>

<select id="reply_report" resultType="com.ezen.bada.review.Review_reply_report_DTO">
   select * from (
   select rownum rn, A.* from(  
   select * from bada_review_reply_report order by review_reply_ban_num desc)A)
   where rn between #{start} AND #{end}
</select>

<delete id="report_reply_delete">
	delete from bada_review_reply_report where reply_num = #{param1}
</delete>

 <!-- 댓글 신고 내역 삭제 -->
<delete id="reply_ban_delete">
	delete from bada_review_reply_report where review_reply_ban_num = #{param1}
</delete>

 <!-- 게시글 삭제시 댓글내역 삭제 -->
<delete id="review_comment_delete">
	delete from bada_review_comment where review_num = #{param1}
</delete>




<!-- 나도 한마디를 작성하면 저장이 됨 -->
<insert id="say_one_save">
	insert into bada_one (one_num, id, name, content, loc) 
	values (one_seq.nextval, #{param1}, #{param2}, #{param3}, #{param4})
</insert>

<select id="say_one_sentence" resultType="com.ezen.bada.review.OneDTO">
	select * from bada_one
	order by one_date  ASC
</select>


</mapper>