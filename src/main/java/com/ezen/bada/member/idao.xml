<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
    
<mapper namespace="com.ezen.bada.member.Service">

<select id="login_check" resultType="String">
   SELECT role FROM bada_user WHERE id =#{param1} and pw = #{param2}
</select>

<select id="idcheck" resultType="String">
	select id from bada_user where id=#{param1}
</select>

<select id="emailcheck" resultType="String">
	select email from bada_user where email=#{param1}
</select>

<insert id="membersave">
   insert into bada_user(user_number,id,pw,name,email,gender,age)
   values (user_seq.nextval, #{param1}, #{param2}, #{param3},
   #{param4}, #{param5}, #{param6})
</insert>

<select id="total" resultType="int">
   select count(*) from bada_user
</select>

<select id="member_list" resultType="com.ezen.bada.member.MemberDTO">
   select * from (
   select rownum rn, A.* from(  
   select user_number, id, name, gender, age from bada_user order by user_number asc)A)
   where rn between #{start} AND #{end}
</select>

<select id="memberout" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user order by user_number
</select>
<!-- 기본 memberout이지만 일단은 *로 뽑았습니다! jsp 파일에서 출력 시에 출력만 선별해서 하면 되니까요!
근데 혹시 보안상의 문제가 있을 것 같다면 select user_number, id, name, gender, age from bada_user로 수정해주셔도 좋아용~
from. (정)지수 -->

<!-- 서치의 늪 시작 -->
<select id="member_search_num_n_n" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where user_number like '%' || #{param1} || '%'
</select>

<select id="member_search_num_n_a" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where user_number like '%' || #{param1} || '%' 
   and age = #{param2}
</select>

<select id="member_search_num_g_n" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where user_number like '%' || #{param1} || '%' 
   and gender = #{param2}
</select>

<select id="member_search_num_g_a" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where user_number like '%' || #{param1} || '%'
   and gender = #{param2} and age = #{param3}
</select>
<!-- 회원번호로 서치 끝 -->

<select id="member_search_id_n_n" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where id like '%' || #{param1} || '%'
</select>

<select id="member_search_id_n_a" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where id like '%' || #{param1} || '%' 
   and age = #{param2}
</select>

<select id="member_search_id_g_n" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where id like '%' || #{param1} || '%' 
   and gender = #{param2}
</select>

<select id="member_search_id_g_a" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where id like '%' || #{param1} || '%'
   and gender = #{param2} and age = #{param3}
</select>
<!-- 아이디로 서치 끝 -->

<select id="member_search_name_n_n" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where name like '%' || #{param1} || '%'
</select>

<select id="member_search_name_n_a" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where name like '%' || #{param1} || '%' 
   and age = #{param2}
</select>

<select id="member_search_name_g_n" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where name like '%' || #{param1} || '%' 
   and gender = #{param2}
</select>

<select id="member_search_name_g_a" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where name like '%' || #{param1} || '%'
   and gender = #{param2} and age = #{param3}
</select>
<!-- 이름으로 서치 끝 -->

<!-- 회원정보 찾기 -->

<select id="lookid" resultType="com.ezen.bada.member.MemberDTO">
    SELECT name, id FROM bada_user where name = #{param1} AND email= #{param2}
</select>

<select id="lookpw" resultType="com.ezen.bada.member.MemberDTO">
    SELECT name, id, pw FROM bada_user where id = #{param1} AND email= #{param2}
</select>


<!-- 회원 번호로 정보 전체 가져오기 -->
<select id="member_detail_out" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where user_number = #{param1}
</select>

<select id="admincheck" resultType="java.lang.String">
	select id from bada_user where role='admin' and pw=#{param1}
</select>

<!-- 회원 정보 수정하기 -->
<update id="member_modify">
	update bada_user set pw = #{param1}, name = #{param2}, email = #{param3}, gender = #{param4}, age = #{param5} where id = #{param6}
</update>

<!-- 회원 정보 삭제하기가 아래 quit_member의 쿼리와 겹쳐서 생략합니다!-->


<!-- 마이페이지 -->

<select id="myinfo_main" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where id = #{param1}
</select>

<select id="myinfo_modify" resultType="com.ezen.bada.member.MemberDTO">
   select * from bada_user where id = #{param1}
</select>

<update id="info_update1">
	update bada_user set pw=#{param1}, email=#{param2}, gender=#{param3},
	age=#{param4} where id=#{param5}
</update>

<update id="info_update2">
	update bada_user set email=#{param1}, gender=#{param2},
	age=#{param3} where id=#{param4}
</update>

<!-- 회원정보 수정 -->
<update id="update_info">
   update bada_user set pw = #{param2}, email = #{param3}, gender = #{param4}, age = #{param5}, name = #{param6} where id = #{param1}
</update>

<update id="update_no_pw">
   update bada_user set email = #{param1}, gender = #{param2}, age = #{param3}, name = #{param4} where id = #{param5}
</update>

<!-- 비밀번호 검증 -->

<select id="verify_Password" resultType="String">
   select pw from bada_user where id = #{param1}
</select>

<!-- 회원탈퇴 -->

<delete id="quit_member">
	delete from bada_user where id = #{param1}
</delete>


<!-- 기존 회원 정보에 bbti 넣기 -->
<update id="insertbbti">
	update bada_user set bbti = #{param1} where id = #{param2}
</update>

<!-- bbti 값이 이미 있는지 체크 -->
<select id="bbticheck" resultType="Integer">
	select count(bbti) from bada_user where id = #{param1}
</select>

<!-- bbti 테스트값을 가지고 회원가입 -->
<insert id="membersavebbti">
   insert into bada_user(user_number,id,pw,name,email,gender,age,bbti)
   values (user_seq.nextval, #{param1}, #{param2}, #{param3},
   #{param4}, #{param5}, #{param6}, #{param7})
</insert>

<!-- 나의 게시글 리뷰 수  -->
<select id="my_review_total" resultType="int">
   select count(*) from bada_user_review where id = #{param1}
</select>

<!-- 나의 게시글 리뷰 목록 -->
<select id="my_review" resultType="com.ezen.bada.review.AllBoardDTO">
   select * from (
   select rownum rn, A.* from(  
   select * from bada_user_review where id = #{loginid} order by review_num desc)A)
   where rn between #{start} AND #{end}
</select>

<!-- 나의 문의글 수  -->
<select id="inquire_total" resultType="int">
   select count(*) from bada_inquire where id = #{param1}
</select>

<!-- 나의 게시글 문의 목록 -->
<select id="my_inquire" resultType="com.ezen.bada.inquire.InquireDTO">
   select * from (
   select rownum rn, A.* from(  
   select * from bada_inquire where id = #{loginid} order by inquire_num desc)A)
   where rn between #{start} AND #{end}
</select>

<!-- 마이페이지 나의 문의글 추천순  -->
<select id="inquire_best3" resultType="com.ezen.bada.inquire.InquireDTO2">
	<![CDATA[
    select * from (
        select * from bada_inquire 
        order by rec desc
    ) where rownum <= 3
    ]]>
</select>

<!-- 좋아요 게시글 모음 -->
<select id="my_favorite" resultType="com.ezen.bada.review.AllBoardDTO">
    SELECT br.*, bl.beach AS beach
    FROM bada_user_review br
    JOIN bada_list bl ON br.beach_code = bl.beach_code
    WHERE br.rec_id LIKE '%' || #{param1} || '%'
</select>

<select id="havebbti" resultType="String">
	 SELECT NVL(bbti, 'null') AS bbti FROM bada_user WHERE id = #{param1}
</select>

<!-- 나의 북마크 수  -->
<select id="bookmark_total" resultType="int">
   select count(*) from bada_user_review where rec_id LIKE '%' || #{param1} || '%'
</select>

<select id="getDistance" resultType="com.ezen.bada.member.BadaSuggestDTO">
	WITH calculated_distances AS (
	    SELECT 
	        b.beach_code, 
	        b.beach, 
	        b.latitude, 
	        b.longitude, 
	        round(DISTNACE_WGS84(#{param1}, #{param2}, b.latitude, b.longitude),1) AS distance
	    FROM 
	        bada_list b
	)
	SELECT 
	    beach_code, 
	    beach, 
	    latitude, 
	    longitude, 
	    distance
	FROM 
	    calculated_distances
	WHERE 
	    distance = (SELECT MIN(distance) FROM calculated_distances)
</select>

<select id="getname" resultType="String">
	select name from bada_user where id=#{param1}
</select>

<select id="getBbti" resultType="String">
	select bbti from bada_user where id=#{param1}
</select>

<!-- 리뷰된 바다들 중에서 리뷰 2개 이상, 평균 별점 높은 바다 추천 -->
<select id="getmanybada" resultType="com.ezen.bada.weathers.Bada_info_DTO">
    <![CDATA[
	SELECT *
	FROM (
	    SELECT bi.beach_code, bi.beach_name, bi.picture1, bi.address, bi.special
	    FROM bada_info bi
	    JOIN (
	        SELECT bur.beach_code, AVG(bur.review_score) AS avg_score
	        FROM bada_user_review bur
	        GROUP BY bur.beach_code
	        HAVING COUNT(bur.review_num) >= 2
	        ORDER BY avg_score DESC
	    ) reviewed_beaches
	    ON bi.beach_code = reviewed_beaches.beach_code
	    ORDER BY reviewed_beaches.avg_score DESC
	)
	WHERE ROWNUM = 1
	]]>
</select>


<!-- 입력받은 bbti의 해시태그가 가장 많이 쓰인 바다 -->
<select id="getbbtibesthash" resultType="String">
    <![CDATA[
        WITH hashtag_counts AS (
            SELECT
                bbti_code AS code,
                regexp_substr(bbti_hashtags, '[^ ]+', 1, LEVEL) AS hashtag
            FROM
                bada_bbti
            WHERE
                bbti_code = #{param1}
            CONNECT BY
                LEVEL <= REGEXP_COUNT(bbti_hashtags, ' ') + 1
                AND PRIOR bbti_code = bbti_code
                AND PRIOR SYS_GUID() IS NOT NULL
        ),
        beach_hashtags AS (
            SELECT
                beach_code,
                REGEXP_SUBSTR(concatenated_hashtags, '[^ ]+', 1, LEVEL) AS hashtag
            FROM (
                SELECT
                    beach_code,
                    LISTAGG(hashtag, ' ') WITHIN GROUP (ORDER BY hashtag) AS concatenated_hashtags
                FROM
                    bada_user_review
                GROUP BY
                    beach_code
            )
            CONNECT BY
                LEVEL <= REGEXP_COUNT(concatenated_hashtags, ' ') + 1
                AND PRIOR beach_code = beach_code
                AND PRIOR SYS_GUID() IS NOT NULL
                AND LEVEL <= 1000
        ),
        matching_counts AS (
            SELECT
                hc.code AS bbti_code,
                bh.beach_code,
                COUNT(*) AS matching_hashtags_count
            FROM
                beach_hashtags bh
                JOIN hashtag_counts hc ON bh.hashtag = hc.hashtag
            GROUP BY
                hc.code,
                bh.beach_code
        ),
        ranked_beaches AS (
            SELECT
                bbti_code,
                beach_code,
                matching_hashtags_count,
                ROW_NUMBER() OVER (PARTITION BY bbti_code ORDER BY matching_hashtags_count DESC) AS rank
            FROM
                matching_counts
        )
        SELECT
            beach_code
        FROM
            ranked_beaches
        WHERE
            rank = 1
    ]]>
</select>

<select id="getbbtibada" resultType="com.ezen.bada.weathers.Bada_info_DTO">
	select * from bada_info where beach_code = #{param1}
</select>

</mapper>